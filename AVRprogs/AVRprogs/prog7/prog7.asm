; программа 7
; моргаем диодами в разные стороны
; используем лайнер для задержки и прерывания



.DEVICE ATmega128	;8MHz
.include "m128def.inc"

.equ kdel = 1562


.dseg
.org 0x0100
buf:
.byte 1


;----------------------Начало программы
.cseg
.org 0


;----------------------Инициализ. векторы прерываний


jmp Init1

.org 0x18

jmp TIM1_COMPA

.org 0x46

Init1:
;----------------------Инициализ. стека
;----------------------Надо записать RAMEND=0x10ff в верхний 
ldi r16, high(RAMEND)
out sph, r16
ldi r16, low(RAMEND)
out spl, r16

;----------------------

ldi r16, 0x08
sts DDRF, r16

ldi r16, 0x08
sts PORTF, r16


;----------------------Инициализ. порты

ldi r16, 0x00
out DDRD, r16

ldi r16, 0xff
out 0x1A, r16
out PORTA, r16
out PORTD, r16

;----------------------Инициализ. таймера

ldi r16, 0x0D	; выбор режима СТС с делителем 1024
out TCCR1B, r16
ldi r16, high(kdel)
out OCR1AH, r16
ldi r16, low(kdel)
out OCR1AL, r16
ldi r16, 0b00010000
out TIMSK, r16

;----------------------Основной цикл програмы

ldi r16, 0b00001000
sts buf, r16
sei ; разрешение глобального прерывания

do_nothing:
rjmp do_nothing

;----------------------Обрабатываем прерывание по таймеру 1 канал А
TIM1_COMPA:

		push	r16			; Сохраняем регистр temp
		push	r17				; Сохраняем регистр rab

		lds		r17, buf		; Читаем содержимое rab из ОЗУ
		
		in		r16, PIND		; Считываем содержимое порта PD
		sbrs	r16, 0			; Проверка младшего разряда		
		rjmp	m2				; Если не ноль, переходим к сдвигу влево
		
;------------------------- Сдвиг вправо

m1:		lsr		r17				; Сдвиг содержимого рабочего регистра
		brcc 	m3				; Если не дошло до конца регистра продолжить
		ldi		r17, 0b10000000	; Запись начального значения
		rjmp	m3				; На начало

;------------------------- Сдвиг влево

m2:		lsl		r17				; Сдвиг содержимого рабочего регистра
		brcc	m3				; Если не дошло до конца регистра продолжить
		ldi		r17, 0b00000001	; Запись начального значения

;-------------------------- Конец процедуры обработки прерывания

m3:		ldi		r16, 0xFF		; Записть в temp числа $FF
		eor		r16, r17		; Инверсия содержимого rab (исключающее ИЛИ)
		out		PORTB, r16		; Вывод текущего значения в порт PB

		sts		buf, r17		; Запись регистра rab в ОЗУ
			
		pop		r17				; Восстанавливаем регистр rab
		pop		r16			; Восстанавливаем регистр temp

reti


