;##############################################
;##                Пример 7                  ##
;##             "Бегущие огни"               ##
;##  с использованием прерываний оттаймера   ##
;##############################################

;------------------------- Псевдокоманды управления

.include "tn2313def.inc"	; Присоединение файла описаний
.list					; Включение листинга

.def	temp = r16		; Определение главного рабочего регистра
.def 	rab = r17		; Определение рабочего регистра

.equ	kdel = 780

;------------------------- Резервирование ячеек памяти

		.dseg			; Выбираем сегмент ОЗУ
		.org	0x60	; Устанавливаем текущий адрес сегмента

buf:	.byte	1		; Один байт для хранение рабочго значения




;------------------------- Начало программного кода

		.cseg 			; Выбор сегмента программного кода
		.org	0		; Устанеовка текущего адреса на ноль

start:	rjmp	init	; Переход на начало программы
		reti			; Внешнее прерывание 0
		reti			; Внешнее прерывание 1
		reti			; Прерывание по захвату таймера T1
		rjmp 	prtim1	; Прерывание по совпадению T1
		reti			; Прерывание по переполнению T1
		reti			; Прерывание по переполнению T0
		reti			; Прерывание UART прием завершен
		reti			; Прерывание UART регистр данных пуст
		reti			; Прерывание UART передача завершена
		reti			; Прерывание по компаратору
		reti			; Прерывание по изменению на любом контакте
		reti			; Таймер/счетчик 1. Совпадение B 
		reti			; Таймер/счетчик 0. Совпадение B 
		reti			; Таймер/счетчик 0. Совпадение A 
		reti			; USI Стартовая готовность
		reti			; USI Переполнение
		reti			; EEPROM Готовность
		reti			; Переполнение охранного таймера


; ------------------- Модуль инициализации
init:

;-------------------------- Инициализация стека
	
		ldi		temp, 0x7F	; Выбор адреса вершины стека 
		out		SPL, temp	; Запись его в регистр стека

;-------------------------- Инициализация Главного предделителя

		ldi		temp, 0x80  ; Записываем число $80 в регистр temp
		out		CLKPR, temp	; Записываем в регистр CLKPR
		ldi		temp, 0		; Записываем 0 в регистр temp
		out		CLKPR, temp	; Записываем этот ноль в CLKPR

;-------------------------- Инициализация портов ВВ
	
		out		DDRD, temp	; Записываем ноль в DDRD (порт PD на ввод)

		ldi		temp, 0xFF	; Записываем число $FF в регистр temp
		out		DDRB, temp	; Записываем это число в DDRB (порт PB на вывод)
		out		PORTB, temp	; Записываем то же число в PORTB (потушить светодиод)
		out		PORTD, temp	; Записываем его же в PORTD (вкл.внутр.резисторы)	


;-------------------------- Инициализация таймера T1

		ldi		temp, 0xD			; Выбор режима таймера
		out		TCCR1B, temp
		ldi		temp, high(kdel)	; Старший полубайт кода совпадения
		out		OCR1AH, temp		; Запись в регистр совпадения старш.
		ldi		temp, low(kdel)		; Младший полубайт кода совпадения
		out		OCR1AL, temp		; Запись в регистр совпадения младш.

;--------------------------- Запись в регистр маски
		
		ldi 	temp, 0b01000000	; Разрешаем прерывание от таймера
		out		TIMSK, temp

;--------------------------- Инициализация компаратора

		ldi 	temp, 0x80		; Выключение компаратора
		out		ACSR, temp


;-------------------------- Начало основной программы
main:
		
		ldi 	rab, 0b00010000	; Запись начального значения
		sts		buf, rab		; Запись содержимого регистра rab в ОЗУ

		sei						; Разрешение прерываний
m1:		rjmp	m1				; Пустой бесконечный цикл





;========================================================
;       Подпрограмма обработки прерываний
;========================================================


prtim1:	
		push	temp			; Сохраняем регистр temp
		push	rab				; Сохраняем регистр rab

		lds		rab, buf		; Читаем содержимое rab из ОЗУ
		
		in		temp, PIND		; Считываем содержимое порта PD
		sbrs	temp, 0			; Проверка младшего разряда		
		rjmp	p2				; Если не ноль, переходим к сдвигу влево
		
;------------------------- Сдвиг вправо

p1:		lsr		rab				; Сдвиг содержимого рабочего регистра
		brcc 	p3				; Если не дошло до конца регистра продолжить
		ldi		rab, 0b10000000	; Запись начального значения
		rjmp	p3				; На начало

;------------------------- Сдвиг влево

p2:		lsl		rab				; Сдвиг содержимого рабочего регистра
		brcc	p3				; Если не дошло до конца регистра продолжить
		ldi		rab, 0b00000001	; Запись начального значения

;-------------------------- Конец процедуры обработки прерывания

p3:		ldi		temp, 0xFF		; Записть в temp числа $FF
		eor		temp, rab		; Инверсия содержимого rab (исключающее ИЛИ)
		out		PORTB, temp		; Вывод текущего значения в порт PB

		sts		buf, rab		; Запись регистра rab в ОЗУ
			
		pop		rab				; Восстанавливаем регистр rab
		pop		temp			; Восстанавливаем регистр temp
		reti
